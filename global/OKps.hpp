#pragma once

/*
此静态库的导出头文件
包含此头文件，就能使用此库的所有功能。

此库的头文件不使用宏定义，而是使用 #pragma once 的方式防止重复包含。
这是因为，虽然#pragma once 不是c++标准硬性规定的，但它受主流编译器支持较好。
而使用宏定义虽然是标准做法，但是万一和其他人编写的代码中的宏定义产生冲突，很可能导致严重问题。
例如，此库实现了高精度整数，以及依赖于高精度整数运算的RSA加密算法，而很多常用的库也都实现了自己的一套高精度和加密算法，
万一其中有名字冲突，麻烦无穷无尽。
宏定义导致的问题除了无法通过编译，还有可能是通过编译但引入未定义行为，这比不通过编译更加可怕。
不要使用不支持#pragma once 的编译器编译此库。

大部分主流c++编译器都默认c++源文件使用 utf-8 编码，尤其是新版clang只支持 utf-8 编码的源文件。非windows的操作系统，大多数也默认使用 utf-8 编码的系统 api 和终端模拟器。
故为保持一致性，此库的所有源文件都以utf-8编码保存，所有char const *类型的字符串字面量都是utf-8编码。
此库的所有函数的参数都要求传入utf-8编码的字符串；调用此库的任一函数之前都需保证程序的全局本地环境和系统终端的代码页都是utf-8编码。
此库的所有异常的提示信息都是 utf-8 编码的字符串，除非使用者不遵守上述规则。

对任何有源代码的库，都最好自己编译成静态库，并在链接时打开“在链接时生成代码”的优化选项。
这允许链接器在链接库时，根据库的源代码做进一步优化。
由于有完整的源代码，链接器可以在链接时对函数进行展开和内联，去掉逻辑中重复或无效的部分。

此库对于所有导出的符号，即类、公开的内部类的名称，公开的类型别名、成员变量、成员函数，都使用类似c++标准库的命名方法，即尽量使用全小写字母，并使用下划线连接；不使用驼峰，也不使用以下划线开头的名称。
例如：
namespace OKps::exsample
{
    class just_a_toy
    {
    public:
        constexpr char const * const hint_string = "只是一串字符串常量";
        using id_type = std::uintmax_t;
        class toy_id;
        toy_id play_toy(id_type);
    }
};

既然使用c++，我希望不要有莫名其妙的限制，尤其是很多程序员痛恨的异常和重载。
看看c标准库，没有重载导致语义相同的函数不得不写很多个，比如字符串和算术类型的转换，不得不对 long 、int、long long等分别都用不同的函数名，为了缩短函数名，又要用极简的缩写命名。
就我的体验而言，这样的函数我用起来并不舒适。

异常更是被很多人视为洪水猛兽，他们认为只应该用错误码。
我的观点是，异常是整个程序的死亡通知书，不是一个函数的疾病诊断书。
捕获异常时，只须决定要火化还是要捐献，不要自以为能冥土追魂。
c++标准库中的异常，除了内存分配失败，就是防各种未定义行为，
包括除零错误，非法类型转换，动态数组访问越界，死锁等。
而像因权限不足无法访问文件，标准输入输出发生failbit，
这样的错误标准库用的就是错误码（std::error_code或位掩码形式）。
抛出异常代表程序做了绝对不应该做的行为，如果这时还返回错误码，就是在鼓励程序员处理不能处理的错误，
让程序带着潜伏期的病毒运行，这绝对不该允许。
比如死锁，捕获异常之后除了记录日志，还能做什么？
被锁的数据已经乱掉了，线程已经不同步了，栈可能已经坏了，
不是异常搞坏的，是程序员写出未定义行为搞坏的。
死锁，数据竞争，访问越界，非法类型转换等行为，会给整个程序埋雷，
它爆雷的时间地点不确定，有可能就爆在试图处理错误码的位置。
怎么能用已经污染的手术刀切除病灶呢？
异常是整个程序的死亡通知书，不是一个函数的疾病诊断书。不要做已经没治了还要硬治的愚蠢程序员。
对于这样的错误，就是应该使用异常，而不是任何其他机制。

此库中所有异常都是继承 std::exception 的标准异常类型。
*/

//#include ".\stl.hpp"

//#include ".\memory.hpp"

#include ".\blank.hpp"
#include ".\base.hpp"
#include ".\lock.hpp"
#include ".\fundamental.hpp"
#include ".\timer.hpp"
#include ".\cipher.hpp"
#include ".\error.hpp"
#include ".\sample.hpp"
#include ".\code_page.hpp"
#include ".\decimal.hpp"